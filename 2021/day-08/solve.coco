import sys
from collections import defaultdict, namedtuple

import numpy as np

Entry = namedtuple("Entry", ["signal", "output"])


"""
 0000
1    2
1    2
 3333
4    5
4    5
 6666

2: 1
3: 7
4: 4
7: 8
5: 2,3,5
6: 0,6,9
"""

ON2NUM = {
    (0, 1, 2, 4, 5, 6):    0,
    (2, 5):                1,
    (0, 2, 3, 4, 6):       2,
    (0, 2, 3, 5, 6):       3,
    (1, 2, 3, 5):          4,
    (0, 1, 3, 5, 6):       5,
    (0, 1, 3, 4, 5, 6):    6,
    (0, 2, 5):             7,
    (0, 1, 2, 3, 4, 5, 6): 8,
    (0, 1, 2, 3, 5, 6):    9,
}


def decode(signal: list[str]) -> dict[str, int]:
    wires = defaultdict(lambda: [])
    for ws in signal:
       wires[len(ws)].append(ws)

    # segment index -> { possible wires }
    seg = defaultdict(lambda: set())

    # seg 0 is the difference between digit 7 (3 wires) and digit 1 (2 wires)
    seg[0] = set(wires[3][0]) - set(wires[2][0])

    # seg 2,5 are given by digit 1 (2 wires)
    seg[2] = set(wires[2][0])
    seg[5] = set(wires[2][0])

    # digit 4 has 4 wires: 1,2,3,5
    seg[2] &= set(wires[4][0])
    seg[5] &= set(wires[4][0])
    seg[1]  = set(wires[4][0]) - (seg[2] | seg[5])
    seg[3]  = set(wires[4][0]) - (seg[2] | seg[5])

    # digits 2,3,5 (5 wires) have seg idx 0,3,6 in common
    common = set.intersection(*map(set, wires[5])) - seg[0]
    seg[3] &= common
    seg[6]  = common - seg[3]
    # now seg 1 must be updated since it's related with seg 3 by digit 4
    seg[1] -= seg[3]

    # seg 4 is given the last unused wire
    seg[4] = set("abcdefg") - set.union(*seg.values())
    assert len(seg[4]) == 1

    # finally, to decide between seg 2 and 5:
    # first, get the common segments between digits 2,3,5
    common = set.intersection(*map(set, wires[5]))
    # then, keep the rem ones without 3 (which has both seg 2 and 5)
    rem = [set(w) - common for w in wires[5]]
    assert seg[2] == seg[5]
    rem.remove(seg[2])
    # now, rem contains wires for digits 2 and 5, which don't have anything in common
    # digit 2 has seg 2,4
    # digit 5 has seg 1,5
    assert len(rem) == 2
    assert rem[0] & rem[1] == set()

    # find digit 2, which has seg 4
    for r in rem:
        if r & seg[4] == seg[4]:
            seg[2] &= r - seg[4]
            seg[5] -= seg[2]
            break

    # at this point, all segments must be connected to a single wire
    for s, w in seg.items():
        assert len(w) == 1

    # str -> int
    return {w.pop(): s for s, w in sorted(seg.items())}


def get_digit(seg2idx: dict[int, str], pattern: str) -> int:
    on = [seg2idx[x] for x in pattern]
    return ON2NUM[tuple(sorted(on))]


def part1(entries) -> int:
    """
    Digits 1,4,7,8 are repr by a unique number of segments: 2,4,3,7.
    """
    return (
        entries
        |> map$(.output)
        |> map$(xs -> sum(1 for x in xs if len(x) in [2, 3, 4, 7]))
        |> sum
    )


def part2(entries) -> int:
    total = 0

    for ent in entries:
        seg2idx = decode(ent.signal)
        total += (
            ent.output
            |> map$(get_digit$(seg2idx))
            |> map$(str)
            |> ''.join
            |> int
        )

    return total


def main():
    with open(sys.argv[1]) as fp:
        entries = (
            fp.readlines()
            |> map$(l -> l.split(" | "))
            |> map$(l -> (l[0].strip().split(), l[1].strip().split()))
            |> map$(l -> Entry(*l))
            |> list
        )

    print("Part 1:", part1(entries))
    print("Part 2:", part2(entries))


if __name__ == "__main__":
    main()
