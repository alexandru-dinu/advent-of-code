from pathlib import Path
from typing import TextIO

import numpy as np


def get_inp(fp: TextIO):
    return [[x for x in line.strip()] for line in fp] |> np.array


def north(mat):
    for i, j in np.argwhere(mat == 'O'):
        fst = mat[:i, j][::-1] |> takewhile$(x -> x == '.') |> list |> len

        # can't move upwards
        if fst == 0:
            continue

        mat[i, j] = '.'  # empty the current cell
        mat[i - fst, j] = 'O'  # move north

    return mat


def south(mat) =
    mat |> np.rot90$(k=2) |> north |> np.rot90$(k=-2)


def west(mat) =
    mat |> np.rot90$(k=-1) |> north |> np.rot90$(k=1)


def east(mat) =
    mat |> np.rot90$(k=1) |> north |> np.rot90$(k=-1)


def single_cycle(mat) =
    mat |> north |> west |> south |> east


def iterate(f, x):
    y = f(x)
    yield y
    yield from iterate(f, y)


def multiple_cycles(mat, n):
    seen = {}

    for i, mat in enumerate(iterate(single_cycle, mat), start=1):
        h = mat |> map$(tuple ..> hash) |> tuple |> hash

        if h not in seen:
            # save the arrays until a period is found to avoid simulating again
            seen[h] = (i, mat.copy())
        else:
            # (initial) + | ... | + | ... | + ...
            #             ^ --- ^ period size
            j, _ = seen[h]
            initial = j - 1
            period_size = i - j
            d, m = divmod(n - initial, period_size)
            assert n == initial + d * period_size + m

            for i, mat in seen.values():
                if i == initial + m:
                    return mat

    assert False


def load(mat):
    return (len(mat) - np.argwhere(mat == 'O')[:, 0]).sum()


def solve(fp: TextIO):
    mat = get_inp(fp)

    p1 = mat.copy() |> north |> load
    p2 = mat.copy() |> multiple_cycles$(n=int(1e9)) |> load

    return p1, p2


def test_example():
    with open(Path(__file__).parent / "example") as fp:
        p1, p2 = solve(fp)

    assert p1 == 136
    assert p2 == 64


def main():
    with open(0) as fp:
        p1, p2 = solve(fp)

    print(f"Part 1: {p1}")
    print(f"Part 2: {p2}")


if __name__ == "__main__":
    main()
